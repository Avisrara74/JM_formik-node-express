{"version":3,"sources":["API/index.js","components/app.js","serviceWorker.js","index.js"],"names":["signUpUrl","createNewUser","values","a","axios","post","initialValues","name","password","repeatPassword","email","website","age","currentSkill","skills","acceptTerms","registrationSchema","Yup","shape","max","required","min","matches","oneOf","url","App","useState","isFormDisabled","setFormDisabled","handleOnRemoveSkill","idx","setFieldValue","newSkillsList","filter","skill","indexOf","handleOnSubmit","props","setSubmitting","setFieldError","resetForm","response","status","alert","message","data","field","validationSchema","onSubmit","handleChange","handleSubmit","errors","touched","className","htmlFor","id","onChange","value","placeholder","prefix","UserOutlined","disabled","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","handleOnChangeAge","defaultValue","length","map","skillIndex","title","key","type","onClick","renderSkillsList","event","currentSkillValue","currentSkillsList","preventDefault","trim","newSkill","uniqueId","handleOnAddSkill","checked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4c42c699.chunk.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\n\nconst mainUrl = 'http://localhost:9000/';\nconst signUpUrl = `${mainUrl}sign-up`;\n\nexport const createNewUser = async (values) => axios.post(signUpUrl, values);\n","/* eslint react/prop-types: 0 */\nimport React, { useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { uniqueId } from 'lodash';\nimport {\n  Input, InputNumber, Checkbox, Button,\n} from 'antd';\nimport { UserOutlined, EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\nimport { createNewUser } from '../API';\nimport 'antd/dist/antd.css';\nimport './app.css';\n\nconst initialValues = {\n  name: '',\n  password: '',\n  repeatPassword: '',\n  email: '',\n  website: '',\n  age: 0,\n  currentSkill: '',\n  skills: [],\n  acceptTerms: false,\n};\n\nconst registrationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Слишком длинное имя!')\n    .required('Заполните поле'),\n  password: Yup.string()\n    .min(8, 'Слишком короткий')\n    .max(50, 'Слишком длинный')\n    .matches(/^[A-Za-z0-9]+$/, 'Пароль может содержать только латинские символы и цифры')\n    .matches(/(?=.*[0-9])/, 'Пароль должен содержать хотя бы одну цифру')\n    .matches(/(?=.*[A-Z])/, 'Пароль должен содержать хотя бы одну заглавную букву')\n    .required('Заполните поле'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Пароли должны совпадать')\n    .required('Заполните поле'),\n  email: Yup.string()\n    .email('Некорректный email')\n    .required('Заполните поле'),\n  website: Yup.string()\n    .url('Некорректный адрес сайта'),\n  age: Yup.number()\n    .min(18, 'Вам должно быть 18')\n    .max(65, 'Почему нельзя регистрироваться после 65?'),\n  acceptTerms: Yup.bool()\n    .oneOf([true], 'Необходимо принять соглашение'),\n});\n\nconst App = () => {\n  const [isFormDisabled, setFormDisabled] = useState(false);\n\n  const handleOnChangeAge = (value, setFieldValue) => {\n    setFieldValue('age', value);\n  };\n\n  const handleOnAddSkill = (event, setFieldValue, currentSkillValue, currentSkillsList) => {\n    event.preventDefault();\n    const isInputEmpty = currentSkillValue.trim().length === 0;\n    if (isInputEmpty) {\n      setFieldValue('currentSkill', '');\n      return false;\n    }\n\n    const newSkill = {\n      title: currentSkillValue,\n      id: uniqueId(),\n    };\n\n    const newSkillsList = [...currentSkillsList, newSkill];\n    setFieldValue('skills', newSkillsList);\n    setFieldValue('currentSkill', '');\n    return true;\n  };\n\n  const handleOnRemoveSkill = (idx, skills, setFieldValue) => () => {\n    const newSkillsList = skills.filter((skill) => skills.indexOf(skill) !== idx);\n    setFieldValue('skills', newSkillsList);\n  };\n\n  const renderSkillsList = (skills, setFieldValue) => {\n    if (skills.length === 0) return null;\n\n    return (\n      skills.map((skill) => {\n        const skillIndex = skills.indexOf(skill);\n        const { id, title } = skill;\n        return (\n          <div key={id} className=\"skill-list-wrapper\">\n            <div className=\"skill-list-wrapper-item\">{title}</div>\n            <button\n              type=\"button\"\n              className=\"skill-list-wrapper-remove\"\n              onClick={handleOnRemoveSkill(skillIndex, skills, setFieldValue)}\n            >\n              X\n            </button>\n          </div>\n        );\n      })\n    );\n  };\n\n  const handleOnSubmit = async (values, props) => {\n    const { setSubmitting, setFieldError, resetForm } = props;\n    try {\n      setFormDisabled(true);\n      const response = await createNewUser(values);\n      switch (response.status) {\n        case 200: {\n          setFormDisabled(false);\n          resetForm();\n          alert('Вы успешно зарегистрированны'); // eslint-disable-line no-alert\n          break;\n        }\n        case 500: {\n          setFormDisabled(false);\n          alert('Произошла ошибка на сервере, попробуйте позже'); // eslint-disable-line no-alert\n          break;\n        }\n        default: {\n          setFormDisabled(false);\n          alert('Неизвестная ошибка'); // eslint-disable-line no-alert\n        }\n      }\n    } catch (err) {\n      if (err.message === 'Network Error') {\n        alert('Ошибка соединения'); // eslint-disable-line no-alert\n        setFormDisabled(false);\n        return;\n      }\n      const { field, message } = err.response.data;\n      setFieldError(field, message);\n      setSubmitting(false);\n      setFormDisabled(false);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={registrationSchema}\n      onSubmit={handleOnSubmit}\n    >\n      {({\n        values, handleChange, setFieldValue, handleSubmit, errors, touched,\n      }) => (\n        <Form className=\"form\">\n          <div className=\"form-item \">\n            <label htmlFor=\"userName\">Имя: </label>\n            <Input\n              id=\"name\"\n              name=\"name\"\n              onChange={handleChange}\n              value={values.name}\n              placeholder=\"Введите ваше имя\"\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              disabled={isFormDisabled}\n            />\n            {errors.name && touched.name ? (\n              <div className=\"error\">{errors.name}</div>\n            ) : null}\n          </div>\n\n          <div className=\"form-item \">\n            <label htmlFor=\"password\">Введите пароль: </label>\n            <Input.Password\n              id=\"password\"\n              name=\"password\"\n              onChange={handleChange}\n              value={values.password}\n              placeholder=\"Введите пароль\"\n              iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n              disabled={isFormDisabled}\n            />\n            {errors.password && touched.password ? (\n              <div className=\"error\">{errors.password}</div>\n            ) : null}\n          </div>\n\n          <div className=\"form-item \">\n            <label htmlFor=\"repeatPassword\">Повторите пароль: </label>\n            <Input.Password\n              id=\"repeatPassword\"\n              name=\"repeatPassword\"\n              onChange={handleChange}\n              value={values.repeatPassword}\n              placeholder=\"Повторите пароль\"\n              iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n              disabled={isFormDisabled}\n            />\n            {errors.repeatPassword && touched.repeatPassword ? (\n              <div className=\"error\">{errors.repeatPassword}</div>\n            ) : null}\n          </div>\n\n          <div className=\"form-item \">\n            <label htmlFor=\"email\">Email: </label>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              value={values.email}\n              placeholder=\"Введите ваш Email\"\n              disabled={isFormDisabled}\n            />\n            {errors.email && touched.email ? (\n              <div className=\"error\">{errors.email}</div>\n            ) : null}\n          </div>\n\n          <div className=\"form-item \">\n            <label htmlFor=\"website\">Вебсайт (необязательно)</label>\n            <Input\n              id=\"website\"\n              name=\"website\"\n              onChange={handleChange}\n              value={values.website}\n              placeholder=\"Ваш вебсайт\"\n              disabled={isFormDisabled}\n            />\n            {errors.website && touched.website ? (\n              <div className=\"error\">{errors.website}</div>\n            ) : null}\n          </div>\n\n          <div className=\"form-item \">\n            <label htmlFor=\"age\">Возраст: </label>\n            <InputNumber\n              id=\"age\"\n              name=\"age\"\n              onChange={(value) => handleOnChangeAge(value, setFieldValue)}\n              max={65}\n              min={0}\n              defaultValue={0}\n              value={values.age}\n              placeholder=\"Возраст\"\n              disabled={isFormDisabled}\n            />\n            {errors.age && touched.age ? (\n              <div className=\"error\">{errors.age}</div>\n            ) : null}\n          </div>\n\n          <div className=\"form-item \">\n            <label htmlFor=\"skills\">Навыки: </label>\n            {(values.skills.length > 0) ? renderSkillsList(values.skills, setFieldValue) : null}\n            <Input\n              id=\"currentSkill\"\n              name=\"currentSkill\"\n              placeholder=\"Ваш навык\"\n              onChange={handleChange}\n              value={values.currentSkill}\n              disabled={isFormDisabled}\n            />\n            <Button\n              type=\"danger\"\n              className=\"add-skill\"\n              disabled={isFormDisabled}\n              onClick={(event) => (\n                handleOnAddSkill(event, setFieldValue, values.currentSkill, values.skills))}\n            >\n              Добавить навык\n            </Button>\n          </div>\n\n          <div className=\"form-item \">\n            <Checkbox\n              id=\"acceptTerms\"\n              name=\"acceptTerms\"\n              onChange={handleChange}\n              checked={values.acceptTerms}\n              disabled={isFormDisabled}\n            >\n              Согласен с политикой\n            </Checkbox>\n            {errors.acceptTerms && touched.acceptTerms ? (\n              <div className=\"error\">{errors.acceptTerms}</div>\n            ) : null}\n          </div>\n          <div className=\"form-item \">\n            <Button\n              type=\"primary\"\n              onClick={handleSubmit}\n              disabled={isFormDisabled}\n            >\n              Отправить\n            </Button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}